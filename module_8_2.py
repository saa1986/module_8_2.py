"""Задача "План перехват":
Напишите 2 функции:
Функция personal_sum(numbers):
Должна принимать коллекцию numbers.
Подсчитывать сумму чисел в numbers путём перебора и увеличивать переменную result.
Если же при переборе встречается данное типа отличного от числового, то обработать исключение TypeError, увеличив счётчик incorrect_data на 1.
В конечном итоге функция возвращает кортеж из двух значений: result - сумма чисел, incorrect_data - кол-во некорректных данных.
Функция calculate_average(numbers)
Среднее арифметическое - сумма всех данных делённая на их количество.
Должна принимать коллекцию numbers и возвращать: среднее арифметическое всех чисел.
Внутри для подсчёта суммы используйте функцию personal_sum написанную ранее.
Т.к. коллекция numbers может оказаться пустой, то обработайте исключение ZeroDivisionError при делении на 0 и верните 0.
Также в numbers может быть записана не коллекция, а другие типы данных, например числа. Обработайте исключение TypeError выводя строку 'В numbers записан некорректный тип данных'. В таком случае функция просто вернёт None.

Пункты задачи:
Создайте функцию personal_sum на основе условий задачи.
Создайте функцию calculate_average на основе условий задачи.
Вызовите функцию calculate_average несколько раз, передав в неё данные разных вариаций.
Пример результата выполнения программы:
Пример выполнения программы:
print(f'Результат 1: {calculate_average("1, 2, 3")}') # Строка перебирается, но каждый символ - строковый тип
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}') # Учитываются только 1 и 3
print(f'Результат 3: {calculate_average(567)}') # Передана не коллекция
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}') # Всё должно работать"""
def personal_sum(numbers):
    # Инициализация переменной для хранения суммы
    result = 0
    # Инициализация счетчика некорректных данных
    incorrect_data = 0

    # Перебор каждого элемента в коллекции numbers
    for number in numbers:
        try:
            # Попытка добавить number к результату
            result += number
        except TypeError:
            # Если возникает ошибка TypeError, выводим сообщение и увеличиваем счетчик некорректных данных
            print(f'Некорректный тип данных для подсчёта суммы - {number}')
            incorrect_data += 1

    # Возвращаем кортеж: сумма и количество некорректных данных
    return result, incorrect_data

def calculate_average(numbers):
    try:
        # Проверка, является ли numbers коллекцией (списком или кортежем)
        if not isinstance(numbers, (list, tuple)):
            raise TypeError  # Если нет, вызываем исключение TypeError
        # Вызываем функцию personal_sum для получения суммы и количества некорректных данных
        total_sum, incorrect_data = personal_sum(numbers)
        # Вычисляем количество корректных данных
        count = len(numbers) - incorrect_data
        # Возвращаем среднее арифметическое, если количество корректных данных больше 0, иначе 0
        return total_sum / count if count > 0 else 0
    except ZeroDivisionError:
        # Обрабатываем случай деления на 0, возвращаем 0
        return 0
    except TypeError:
        # Если возникает ошибка TypeError, выводим сообщение и возвращаем None
        print('В numbers записан некорректный тип данных')
        return None
# Примеры вызова функции calculate_average с различными данными
print(f'Результат 1: {calculate_average("1, 2, 3")}')  # Строка передана, будет обработана
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}')  # Смешанные типы в списке
print(f'Результат 3: {calculate_average(567)}')  # Число передано, не является коллекцией
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}')  # Корректные данные в списке